components:
  #触发器
  trigger:
    - type: fixed
      name: 20min
      props:
        interval: PT20M
        on-start-run-tasks: true
  #源
  source:
    #类型
    - type: rss
      #组件名称
      name: mikan
      #属性
      props:
        url: https://test.com
  #变量提供器
  variable-provider:
    - type: mikan
      name: mikan
  #item文件解析器
  item-file-resolver:
    - type: fanbox
      name: fanbox
  #下载器
  downloader:
    - type: qbittorrent
      name: qbittorrent
      props:
        url: http://truenas:10095
        username: admin
        password: adminadmin
        download-path: /mnt/bangumi
  #文件移动器
  file-mover:
    - type: qbittorrent
      name: qbittorrent
  #完成后运行
  process-listener:
    - type: http
      name: n8n-webhook-telegram-message
      props:
        method: POST
        url: "http://truenas:5678/webhook/telegram-notify?message=番剧 {summary}下载完成"
  #SourceItem过滤器
  source-item-filter:
  #省略...
  #SourceFile过滤器
  source-file-filter:
  #省略..

processors:
  #处理器名称
  - name: processor-bangumi
    #触发器支持多个
    triggers:
      - webhook
      - fixed:20min
    #引用要处理的源组件
    source: system-file
    #引用变量提供组件,支持多个
    variable-provider:
      - "ai:gpt"
    #引用item文件解析组件
    item-file-resolver: system-file
    #引用下载器
    downloader: system-file
    #引用文件移动器
    file-mover: general
    #保存路径
    save-path: /mnt/bangumi
    #选项
    options:
      #保存路径模板,默认:原路径
      save-path-pattern: "{parent}"
      #文件名模板,默认:原文件名
      filename-pattern: "S{season}E{episode}-{sequence}"
      #命名完成后运行的组件,支持多个
      process-listeners:
        - "touch-item-directory"
        - "clean-empty-directory"
        - "http:n8n-webhook-telegram-message"
      #重命名间隔时间,参考java.time.Duration的格式,只有处理器是AsyncDownloader类型才生效,默认:PT5M(5分钟)
      rename-task-interval: PT2M
      #下载选项,具体看downloader实现,有些定义了也没意义
      download-options:
        #类目
        category: Bangumi
        #标签
        tags:
          - "processor-bangumi"
      #变量冲突时的处理策略,默认:SMART
      #ANY:任意挑选
      #VOTE:挑选值最多的,比如provider1-3,1和2都给了"02",3给了"01"则会选"02"来命名
      #ACCURACY:覆盖,提供者会有准确度的属性,按照最高的来
      #SMART:VOTE+ACCURACY
      variable-conflict-strategy: SMART
      #重命名失败次数阈值,默认:3
      rename-times-threshold: 3
      #保存SourceItem的处理信息
      save-processing-content: true
      #CEL表达式过滤SourceItem,任意一个为true则过滤
      item-expression-exclusions:
        - "title.matches('720(?!)P')"
        - "title.matches('中文配音')"
      #CEL表达式过滤sourceItem,任意一个为false则过滤,支持变量title,contentType,date(yyyy-MM-dd),link
      item-expression-inclusions:
        - "date > timestamp('2023-03-30T00:00:00Z')"
      #CEL表达式过滤sourceFile,任意一个为true则过滤,支持filename,size,contentType
      file-expression-exclusions:
        #文件大小小于1MB的
        - "attrs.size > 1024 * 1024"
      #CEL表达式过滤sourceFile,任意一个为false则过滤
      file-expression-inclusions:
        #文件名包含test的
        - "filename.contains('test')"
      #定义的模板变量不存在时的处理策略,默认:USE_ORIGINAL_FILENAME
      #USE_ORIGINAL_FILENAME:使用原文件名
      #USE_PATTERN:使用模板
      #STAY:不移动留在downloadPath下
      parsing-failed-strategy: USE_ORIGINAL_FILENAME
      #在process-listeners添加touch-item-directory组件,默认:true
      touch-item-directory: true
      #在process-listeners添加clean-empty-directory组件,默认:true
      clean-empty-directory: true
      #变量提供者中的变量名映射
      variables-name-mapping:
        seasonNumber: season
        anitomEpisode: episode
      #给文件打上标记
      file-taggers:
        - "simple"
      #给特定标签的文件有单独的文件名模版，如果不存在则默认使用filename-pattern
      tagged-file-options:
        video:
          filename-pattern: "S{season}E{episode}"
        subtitle:
          filename-pattern: "S{season}E{episode}.{language}"
      #变量命名失败时的处理策略,默认:STAY (但可能会收到FileMover实现的影响，比如BT客户端)
      variable-error-strategy: STAY
      #重命名后是否删除对应SourceItem的空目录,默认:true
      delete-empty-directory: true
      #SourceItem过滤器，使用组件引用的方式
      source-item-filters:
        - "test"
      #FileContent过滤器，使用组件引用的方式
      file-content-filters:
        - "anime"
      #替换变量提供者的变量名
      variable-name-replace:
        episodeAlt: episode
        seasonNumber: season
      #替换变量值
      variable-replacers:
        - regex: "(?i)^BDRIP$"
          replacement: BD
      #每次从Source获取SourceItem的条数，具体看Source实现不能保证一定是其设定的条数
      fetch-limit: 50
      #替换文件的策略组件
      file-replacement-decider: never
